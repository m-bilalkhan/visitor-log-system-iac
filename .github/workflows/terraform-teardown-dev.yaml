name: Terraform Teardown Dev

on:
  workflow_dispatch:
    inputs:
      environment:
        required: true
        type: string
      region:
        required: true
        type: string
      password:
        required: true
        type: string

jobs:
  VerifyPassword:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      verified: ${{ steps.verify-password.outputs.verified }}
    steps:
      - name: "Verify Password (Hint: Madara Uciha)"
        id: verify-password
        run: |
          echo "::add-mask::${{ inputs.password }}"
          if [ "${{ inputs.password }}" = "${{ secrets.password }}" ]; then
            echo "User Verified"
            echo "verified=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Password require for Infra teardown."
            echo "verified=false" >> $GITHUB_OUTPUT
            exit 1
          fi

  Destroy-Infrastructure:
    needs: VerifyPassword
    if: needs.VerifyPassword.outputs.verified == 'true'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.aws_account_id }}:role/${{ secrets.oidc_role_name }}
          aws-region: ${{ inputs.region }}

      - name: Terraform Init
        working-directory: environments/${{ inputs.environment }}/${{ inputs.region }}
        run: terraform init -input=false

      - name: Resolve AMI ID
        id: resolve-ami
        run: |
          AMI_ID=$(aws ec2 describe-images \
            --owners self \
            --filters "Name=tag:Project,Values=visitor-log-system" \
            --filters "Name=tag:Env,Values=dev" \
            --query "Images | sort_by(@, &Tags[?Key=='BuildTime'].Value|[0])[-1].ImageId" \
            --output text)

          if [ "$AMI_ID" = "None" ] || [ -z "$AMI_ID" ]; then
            echo "❌ No AMI found, failing pipeline."
            exit 1
          fi
          echo "ami_id=$AMI_ID" >> $GITHUB_OUTPUT
      
      - name: Terraform Plan
        working-directory: environments/${{ inputs.environment }}/${{ inputs.region }}
        run: terraform plan -var "ami_id=${{ steps.resolve-ami.outputs.ami_id }}" -destroy -out=tfplan
      
      - name: Terraform Destroy
        if: github.ref == 'refs/heads/main'
        working-directory: environments/${{ inputs.environment }}/${{ inputs.region }}
        run: terraform apply -auto-approve tfplan
